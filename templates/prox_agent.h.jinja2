/*******************************************************************************
*
* Copyright (C) 2016 Proximetry Inc. All rights reserved.
* Authors: Proximetry (www.proximetry.io)
*
* THIS SOFTWARE IS PROVIDED BY PROXIMETRY "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
* EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL PROXIMETRY BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************/

/**
 * @file prox_agent.h
 * @brief Proximetry Cloud Agent - Application Interface
 * */

#ifndef PROX_DATA_DEF_H
#define PROX_DATA_DEF_H

#include "lib/prox_api.h"
#include "helpers/prox_helpers.h"


{%- for middleware in middlewares if middleware.tpl is not none %}
#define PROX_DEVICE_MODEL   {{middleware.tpl.device_model_id()}}
#define PROX_CAPFILE_VER    {{middleware.tpl.device_model_ver()}}
{%- endfor %}
#define PROX_INSTANCE_VER   0    // if 0 then the agent is a clear version generated by the AtmelStart.
                                 // Increment it when the code is modified due to project specific requirements.
#define PROX_AGENT_VER     TOSTR(PROX_DEVICE_MODEL)"."TOSTR(PROX_CAPFILE_VER)"-"TOSTR(PROX_INSTANCE_VER)

{% set maxParamNumber = 8 %}
{% set maxStatNumber = 8 %}
{% set maxAlertNumber = 2 %}

/*
 * @brief Configuration Parameter IDs
 */
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
#define PROX_CONF_PARAM_ID__{{  middleware.tpl.param_name(item).upper()}} {{  middleware.tpl.param_id(item)}}
		{%- endif %}
	{%- endfor %}
{%- endfor %}



/*
 * @brief Statistics IDs
 */
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxStatNumber+1) %}
		{%- if  middleware.tpl.stat_en(item) == "True" %}
#define PROX_STAT_ID__{{  middleware.tpl.stat_name(item).upper()}} {{  middleware.tpl.stat_id(item)}}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

/*
 * @brief Alerts IDs
 */
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxAlertNumber+1) %}
		{%- if  middleware.tpl.alert_en(item) == "True" %}
#define PROX_ALERT_ID__{{  middleware.tpl.alert_name(item).upper()}} {{  middleware.tpl.alert_id(item)}}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

/*
 * @brief misc
 */
#define PARAM_STR_LEN 100


/* Uncomment to enable the logging */
#define PROX_LOGGING

#ifdef PROX_LOGGING
	#define PROX_LOG_PREFIX "prox: "
	#define PROX_LOG(...)   do{	printf("%s",PROX_LOG_PREFIX); printf(__VA_ARGS__); }while(0)
	#define EOL   "\n\r"
	#define PROX_LOG_LEVEL  PROX_LOG_INFO_E
#else
	#define PROX_LOG_PREFIX NULL
	#define PROX_LOG(...)
	#define PROX_LOG_LEVEL  PROX_LOG_DISABLE_E
#endif

/*
 * #################################################################################################################################################
 * ############################ PROJECT SPECIFIC INTERFACE #########################################################################################
 * #################################################################################################################################################
 *
 * Functions from list below are project specific and must be implemented, by user, for a particular project.
 *
 * Please create a copy of functions from list below from prox_agent.c file into the main project file and implement the functionalities they expect:
 * (retrieve the particular configuration parameters values, the configuration parameter change logic, get the statistics values, the alarms conditions logic)
 *  List of functions to copy:
 *		int prox_conf_params_update(void);                      - retrieve the particular configuration parameters values,
 *		void prox_conf_param_changed(uint32_t param_id);		- implementation of the logic related to the configuration parameter changes arrived from the cloud,
 *		void prox_stats_update(void);							- retrieve the particular sensor values,
 *		void prox_alerts_update(void);							- implementation of the alarms condition logic.
 *
 *	uint64_t prox_time_ms(void);								- this function must be created from a scratch.
*/

/**
 * @brief Set the configuration parameters values in the Proximetry Agent Library
 */
int prox_conf_params_update(void);

/**
 * @brief Parameter changed callback function
 */
void prox_conf_param_changed(uint32_t param_id);

/**
 * @brief Update statistic values in the Proximetry Agent Library
 */
void prox_stats_update(void);

/**
 * @brief Update alert states in the Proximetry Agent Library
 */
void prox_alerts_update(void);

/**
 * @brief Proximetry Agent get time
 *
 * This routine is invokes by Proximetry Agent Library.
 * It must retrieves timestamp from the system.
 *
 */
uint64_t prox_time_ms(void);

#endif
