/*******************************************************************************
*
* Copyright (C) 2016 Proximetry Inc. All rights reserved.
* Authors: Proximetry (www.proximetry.io)
*
* THIS SOFTWARE IS PROVIDED BY PROXIMETRY "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
* EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL PROXIMETRY BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************/

/**
 * @file prox_agent.c
 * @brief Proximetry Cloud Agent - Application
 */

#include "helpers/prox_helpers.h"
#include "lib/prox.h"
#include "prox_agent.h"
#include "prox_config.h"
#include "prox_data.h"

{% set maxParamNumber = 8 %}
{% set maxStatNumber = 8 %}
{% set maxAlertNumber = 2 %}

{# The flag of the existence of the string parameters #}
{% set paramStrExist = [] %}
{% set paramStrEditableExist = [] %}
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if  middleware.tpl.param_type(item) == "string" %}
  				{% do paramStrExist.append(1) %}
				{%- if  middleware.tpl.param_editable(item) == "True" %}
	  				{% do paramStrEditableExist.append(1) %}
				{%- endif %}
			{%- endif %}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

{%- if paramStrExist %}
/**
 * This application does not use dynamic memory allocation, all STRING configuration parameters must be statically allocated below.
 */

/* Statically allocated memory for string parameters */
static struct str_agent_params_s
{
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if  middleware.tpl.param_type(item) == "string" %}
    char {{  middleware.tpl.param_name(item) }}[PARAM_STR_LEN];
			{%- endif %}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
} str_agent_params;
{%- endif %}

/**
 * @brief Definitions of configuration parameters
 *
 * To define a configuration parameter, a param_id and proper PROX_<TYPE>_CONF_CONF_PARAM_DEF macro should be used.
 * For STRING parameters the statically allocated memory reference must be provided.
 * */
static prox_conf_param_t params[] = {

{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if middleware.tpl.param_type(item) == "bool" %}
    PROX_BOOL_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "int8" %}
    PROX_INT8_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "int16" %}
    PROX_INT16_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "int32" %}
    PROX_INT32_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "uint8" %}
    PROX_UINT8_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "uint16"%}
    PROX_UINT16_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "uint32" %}
    PROX_UINT32_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "float" %}
    PROX_FLOAT_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}}),
			{%- elif middleware.tpl.param_type(item) == "string" %}
    PROX_STRING_CONF_PARAM_DEF(PROX_CONF_PARAM_ID__{{ middleware.tpl.param_NAME(item)}},str_agent_params.{{middleware.tpl.param_name(item)}}),
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
};

/**
 * @brief Definitions of statistics
 *
 * To define a statistic, a stat_id and proper PROX_<TYPE>_STAT_DEF macro should be used.
 * */
static prox_stat_t stats[] =
{
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxStatNumber+1) %}
		{%-if  middleware.tpl.stat_en(item) == "True" %}
			{%- if middleware.tpl.stat_type(item) == "bool" %}
    PROX_BOOL_STAT_DEF(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "int8" %}
    PROX_INT8_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "int16" %}
    PROX_INT16_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "int32" %}
    PROX_INT32_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "uint8" %}
    PROX_UINT8_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "uint16"%}
    PROX_UINT16_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "uint32" %}
    PROX_UINT32_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- elif middleware.tpl.stat_type(item) == "float" %}
    PROX_FLOAT_STAT_DEF(PROX_STAT_ID__{{ middleware.tpl.stat_NAME(item)}}),
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
};

/**
 * @brief Definitions of alerts
 *
 * To define an alert, an alert_id and PROX_ALERT_DEF macro should be used.
 * */
static prox_alert_t alerts[] =
{
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxAlertNumber+1) %}
		{%-if  middleware.tpl.alert_en(item) == "True" %}
    PROX_ALERT_DEF(PROX_ALERT_ID__{{ middleware.tpl.alert_NAME(item)}}),
		{%- endif %}
	{%- endfor %}
{%- endfor %}
};

/**
 * Internal storage for configuration parameters, statistics and alerts.
 *
 * */
prox_vars_t prox_vars =
{
    .params = params,
    .params_num = ARRAY_ELEMS(params),
    .stats = stats,
    .stats_num = ARRAY_ELEMS(stats),
    .alerts = alerts,
    .alerts_num = ARRAY_ELEMS(alerts)
};

/********************************************************************************************************************************/
/*                                       misc routines                                                                    */
/********************************************************************************************************************************/

/**
 * @brief Prints the Proximetry Agent Application configuration parameters
 */
void prox_dump_conf_params(void)
{

{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if middleware.tpl.param_type(item) == "bool" %}
    bool param_{{middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "int8" %}
    int8_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "int16" %}
    int16_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "int32" %}
    int32_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "uint8" %}
    uint8_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "uint16"%}
    uint16_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "uint32" %}
    uint32_t param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "float" %}
    float param_{{ middleware.tpl.param_name(item)}};
			{%- elif middleware.tpl.param_type(item) == "string" %}
    char *param_{{ middleware.tpl.param_name(item)}};
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
{%- if paramStrExist %}
    char tmp_str[PARAM_STR_LEN];
{%-endif%}

    //Read and dump param values from the Proximetry Agent Library
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if middleware.tpl.param_type(item) == "bool" %}
    prox_read_conf_param_bool(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int8" %}
    prox_read_conf_param_int8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int16" %}
    prox_read_conf_param_i16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int32" %}
    prox_read_conf_param_i32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint8" %}
    prox_read_conf_param_u8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint16"%}
    prox_read_conf_param_u16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint32" %}
    prox_read_conf_param_u32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "float" %}
    prox_read_conf_param_float(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:"FLOAT_TO_INT_POINT_INT_FORMAT EOL,FLOAT_TO_INT_POINT_INT_VALUES(param_{{middleware.tpl.param_name(item)}}));
			{%- elif middleware.tpl.param_type(item) == "string" %}
    param_{{middleware.tpl.param_name(item)}} = tmp_str;
    prox_read_conf_param_string(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %s" EOL,param_{{middleware.tpl.param_name(item)}});
			{%- else %}
			{%- endif%}
		{% endif %}
	{%- endfor %}
{%- endfor %}

}

/*
 * #################################################################################################################################################
 * ############################ PROJECT SPECIFIC INTERFACE #########################################################################################
 * #################################################################################################################################################
 *
 * Please create a copy of functions from list below from prox_agent.c file into the main project file and implement the functionalities they expect:
 * (retrieve the particular configuration parameters values, the configuration parameter change logic, get the statistics values, the alarms conditions logic)
 *  List of functions to copy:
 *		int prox_conf_params_update(void);                      - retrieve the particular configuration parameters values,
 *		void prox_conf_param_changed(uint32_t param_id);		- implementation of the logic related to the configuration parameter changes arrived from the cloud,
 *		void prox_stats_update(void);							- retrieve the particular sensor values,
 *		void prox_alerts_update(void);							- implementation of the alarms condition logic.
 */

//##################################################################################################################################################
 #if 0    /* The project specific interface: begin */
//##################################################################################################################################################

/**
 * @brief Parameter changed callback function
 *
 * This function is invoked by the Proximetry Agent Library, as a callback, when a configuration parameter has been changed from the Cloud service.
 * Here is the place for adding the logic related to the configuration parameter modification .
 */
void prox_conf_param_changed(uint32_t param_id)
{

{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%-if  middleware.tpl.param_editable(item) == "True" %}
				{%- if middleware.tpl.param_type(item) == "bool" %}
    bool param_{{middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "int8" %}
    int8_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "int16" %}
    int16_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "int32" %}
    int32_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "uint8" %}
    uint8_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "uint16"%}
    uint16_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "uint32" %}
    uint32_t param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "float" %}
    float param_{{ middleware.tpl.param_name(item)}};
				{%- elif middleware.tpl.param_type(item) == "string" %}
    char *param_{{ middleware.tpl.param_name(item)}};
				{%- else %}
				{%- endif%}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
{%- if paramStrEditableExist %}
    char tmp_str[PARAM_STR_LEN];
{%- endif %}

    switch(param_id)
    {
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%-if  middleware.tpl.param_editable(item) == "True" %}
				{%- if middleware.tpl.param_type(item) == "bool" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_bool(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}} changed to: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "int8" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_i8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "int16" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_i16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "int32" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_i32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "uint8" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_u8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "uint16"%}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_u16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "uint32" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
            prox_read_conf_param_u32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
            // Add logic for change
            // ...
            break;
				{%- elif middleware.tpl.param_type(item) == "float" %}
        case PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:
			param_{{middleware.tpl.param_name(item)}} = tmp_str;
            prox_read_conf_param_float(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},&param_{{middleware.tpl.param_name(item)}});
            PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:"FLOAT_TO_INT_POINT_INT_FORMAT EOL,FLOAT_TO_INT_POINT_INT_VALUES(param_{{middleware.tpl.param_name(item)}}));
            // Add logic for change
            // ...
            break;
				{%- else %}
				{%- endif%}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}
	}
}

/**
 * @brief Update statistic values in the Proximetry Agent Library
 *
 * This routine is invoked periodically by the Proximetry Agent Library to send statistics to the Cloud
 * Put here code responsible for sensor readings
 */
void prox_stats_update(void)
{
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxStatNumber+1) %}
		{%-if  middleware.tpl.stat_en(item) == "True" %}
			{%- if middleware.tpl.stat_type(item) == "bool" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    bool stat_{{middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "int8" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    int8_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "int16" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    int16_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "int32" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    int32_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "uint8" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    uint8_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "uint16"%}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    uint16_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "uint32" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    uint32_t stat_{{ middleware.tpl.stat_name(item)}} = 0;
			{% elif middleware.tpl.stat_type(item) == "float" %}
    // Add here the code to get the {{middleware.tpl.stat_name(item)}} value from a sensor
    // ...
    float stat_{{ middleware.tpl.stat_name(item)}} = 0.0;
			{% endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

    //Write statistic values to the Proximetry Agent Library
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxStatNumber+1) %}
		{%-if  middleware.tpl.stat_en(item) == "True" %}
			{%- if middleware.tpl.stat_type(item) == "bool" %}
    prox_write_stat_bool(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int8" %}
    prox_write_stat_i8(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int16" %}
    prox_write_stat_i16(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int32" %}
    prox_write_stat_i32(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint8" %}
    prox_write_stat_u8(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint16"%}
    prox_write_stat_u16(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint32" %}
    prox_write_stat_u32(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "float" %}
    prox_write_stat_float(PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}},stat_{{middleware.tpl.stat_name(item)}});
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

{% for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxStatNumber+1) %}
		{%-if  middleware.tpl.stat_en(item) == "True" %}
			{%- if middleware.tpl.stat_type(item) == "bool" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int8" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int16" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "int32" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint8" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint16"%}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "uint32" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}: %d" EOL,(int)stat_{{middleware.tpl.stat_name(item)}});
			{%- elif middleware.tpl.stat_type(item) == "float" %}
    PROX_LOG( "PROX_STAT_ID__{{middleware.tpl.stat_NAME(item)}}:"FLOAT_TO_INT_POINT_INT_FORMAT EOL,FLOAT_TO_INT_POINT_INT_VALUES(stat_{{middleware.tpl.stat_name(item)}}));
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

}

/**
 * @brief Set parameter values in the Proximetry Agent Library
 *
 * Put here code responsible for reading device configuration parameters
 */
int prox_conf_params_update(void)
{

{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
    // Add here code to get the {{middleware.tpl.param_name(item)}} configuration parameter value
    // ...
			{%- if middleware.tpl.param_type(item) == "bool" %}
    bool param_{{middleware.tpl.param_name(item)}} = 0;
			{%elif middleware.tpl.param_type(item) == "int8" %}
    int8_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "int16" %}
    int16_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "int32" %}
    int32_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "uint8" %}
    uint8_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "uint16"%}
    uint16_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "uint32" %}
    uint32_t param_{{ middleware.tpl.param_name(item)}} = 0;
			{% elif middleware.tpl.param_type(item) == "float" %}
    float param_{{ middleware.tpl.param_name(item)}} = 0.0;
			{% elif middleware.tpl.param_type(item) == "string" %}
    char *param_{{ middleware.tpl.param_name(item)}} = "";
			{% endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

    //Write configuration parameters values to the Proximetry Agent Library
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if middleware.tpl.param_type(item) == "bool" %}
    prox_write_conf_param_bool(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int8" %}
    prox_write_conf_param_i8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int16" %}
    prox_write_conf_param_i16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int32" %}
    prox_write_conf_param_i32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint8" %}
    prox_write_conf_param_u8(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint16"%}
    prox_write_conf_param_u16(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint32" %}
    prox_write_conf_param_u32(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "float" %}
    prox_write_conf_param_float(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "string" %}
    prox_write_conf_param_string(PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}},param_{{middleware.tpl.param_name(item)}});
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

{% for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxParamNumber+1) %}
		{%-if  middleware.tpl.param_en(item) == "True" %}
			{%- if middleware.tpl.param_type(item) == "bool" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int8" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int16" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "int32" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint8" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint16"%}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "uint32" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %d" EOL,(int)param_{{middleware.tpl.param_name(item)}});
			{%- elif middleware.tpl.param_type(item) == "float" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}:"FLOAT_TO_INT_POINT_INT_FORMAT EOL,FLOAT_TO_INT_POINT_INT_VALUES(param_{{middleware.tpl.param_name(item)}}));
			{%- elif middleware.tpl.param_type(item) == "string" %}
    PROX_LOG( "PROX_CONF_PARAM_ID__{{middleware.tpl.param_NAME(item)}}: %s" EOL,param_{{middleware.tpl.param_name(item)}});
			{%- else %}
			{%- endif%}
		{%- endif %}
	{%- endfor %}
{%- endfor %}

    prox_conf_param_set();

    return 0;
}

/**
 * @brief Update alert states in the Proximetry Agent Library
 *
 * This routine is invoked by the Agent thread for updating alert states.
 * Add here code responsible for setting and clearing alerts.
 */
void prox_alerts_update(void)
{
    //Use the funtions below to set/clear particular alerts
{%- for middleware in middlewares if middleware.tpl is not none %}
	{%- for item in range(1,maxAlertNumber+1) %}
		{%-if  middleware.tpl.alert_en(item) == "True" %}
    //{{middleware.tpl.alert_name(item)}}
    //if (<alert condition>)
    //    prox_set_alert(PROX_ALERT_ID__{{middleware.tpl.alert_NAME(item)}}}});
    //else
    //    prox_clear_alert(PROX_ALERT_ID__{{middleware.tpl.alert_NAME(item)}}}});
		{% endif %}
	{%- endfor %}
{%- endfor %}


}

//##################################################################################################################################################
#endif /* The project specific interface: end */
//##################################################################################################################################################
